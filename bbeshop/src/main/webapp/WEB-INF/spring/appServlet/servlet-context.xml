<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- 해당 요소를 통해 스프링이 자동으로 DefaultAnnotationHandlerMapping을 활성화하고
		 RequestMapping 어노테이션이 부여된 컨트롤러의 메서드를  자동으로 URL 매핑을 수행한다.  -->
	<!-- 해당 요소는 스프링 MVC에서 @Controller, @RequestMapping, @PathVariable, @RequestParam, 
		 @ResponseBody 등과 같은 주요 어노테이션을 처리하기 위해 필요한 빈들을 자동으로 설정해줌으로 
		 @Controller 어노테이션이 붙은 클래스가 컨트롤러로 자동 인식되며, 해당 클래스내의 @RequestMapping
		 어노테이션이 붙은 메서드들이 URL매핑과 연결 된다. -->	 




	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 웹 애플리케이션의 /resources/ 경로로 시작하는 HTTP GET요청에 대해  정적 리소스들을 효율적으로
		 ${webappRoot}/resources 디렉토리에서 제공한다. -->
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:tiles/*.xml</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory" />
	</beans:bean>
	
	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</beans:bean>
	<!-- /resources/**와 일치하는 URL로 들어오는  정적 리소스 요청을 처리하기 위해 <resources> 요소를 사용하고
		 TilesView를 사용하여 레이아웃 기반의 뷰를 처리하기 위해 TilesConfigurer 와 UrlBasedViewResolver
		  를 설정하여 웹 애플리케이션은 정적 리소스와 뷰의 처리를 효과적으로 관리할 수 있다.-->
	
	
	
	<context:component-scan	base-package="com.myspring.bbeshop" />
	<!-- 스프링 컨테스트에서 @Component 어노테이션이 붙은 클래스들을 스캔하여 해당 패키지와 하위 패키지에 위치한 
		 빈(Bean)들을 자동으로 등록하는 설정이다. 빈으로 등록된 클래스들은 의존성 주입(Dependency Injection)
		 등의 기능을 활용하여 스프링 애플리케이션에서 사용할 수 있게 된다.
		 스프링의 어노테이션 기반 설정을 간편하게 사용할 수 있도록 도와주며, XML 설정 파일에서 명시적으로 
		 빈을 하나씩 등록하지 않고도 자동으로 컴포넌트들을 찾아 스프링 컨테이너에 등록하는 편리한 방법을 제공한다. -->

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*/*.do" />
			<mvc:mapping path="/*/*/*.do" />
			<beans:bean class="com.myspring.bbeshop.common.interceptor.ViewNameInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 위 형식의 URL 패턴을 갖는 요청이 들어올 때 컨트롤러로 가기전 ViewNameInterceptor가 납치하여 
		 viewName을 잘라낸다.-->
	
	
	<!-- 멀티파트 리졸버 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="52428800" />
		<beans:property name="maxInMemorySize" value="52428800" />
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>


</beans:beans>
